AWSTemplateFormatVersion: '2010-09-09'
Description: Eliza-GPT Lambda + API Gateway HTTP API
Parameters:
  AllowedCallerCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: Comma-separated CIDR(s) allowed to call the Lambda
  LambdaS3Bucket:
    Type: String
    Description: S3 bucket where packaged Lambda code will be uploaded (for package
      step)
  LambdaS3Key:
    Type: String
    Description: S3 key for the Lambda package (object name)
  LambdaS3ObjectVersion:
    Type: String
    Default: ''
    Description: Optional S3 object version id (if the bucket is versioned)
  RequireApiKey:
    Type: String
    Default: 'false'
    Description: Set to true to require API key in requests
  LogRequests:
    Type: String
    Default: 'false'
    Description: Set to true to enable verbose logging of incoming requests
  ApiKeyPlain:
    Type: String
    Default: ''
    Description: (Optional) Provide API key directly (not recommended for production)
  ApiKeySSMParameterName:
    Type: String
    Default: ''
    Description: (Optional) Store API key in SSM Parameter Store (SecureString). Provide
      parameter name here.
  ApiKeySecretId:
    Type: String
    Default: ''
    Description: (Optional) Store API key in Secrets Manager. Provide secret id or
      ARN here.
  LogGroupName:
    Type: String
    Default: /aws/lambda/eliza-lambda
    Description: CloudWatch Log Group for the Lambda
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*
      - Fn::If:
        - HasApiKeySSM
        - PolicyName: LambdaSSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource:
                Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApiKeySSMParameterName}
        - Ref: AWS::NoValue
      - Fn::If:
        - HasApiKeySecret
        - PolicyName: LambdaSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource:
                Ref: ApiKeySecretId
        - Ref: AWS::NoValue
  ElizaLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: eliza-lambda
      Handler: app.lambda_handler
      Runtime: python3.10
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          ALLOWED_CALLER_CIDR:
            Ref: AllowedCallerCIDR
          LOG_GROUP_NAME:
            Ref: LogGroupName
          REQUIRE_API_KEY:
            Ref: RequireApiKey
          LOG_REQUESTS:
            Ref: LogRequests
          API_KEY:
            Fn::If:
            - HasApiKeyPlain
            - Ref: ApiKeyPlain
            - Fn::If:
              - HasApiKeySSM
              - Fn::Sub: '{{resolve:ssm-secure:${ApiKeySSMParameterName}:1}}'
              - Fn::If:
                - HasApiKeySecret
                - Fn::Sub: '{{resolve:secretsmanager:${ApiKeySecretId}:SecretString:api_key}}'
                - Ref: AWS::NoValue
      Timeout: 10
      MemorySize: 256
      Code:
        S3Bucket:
          Ref: LambdaS3Bucket
        S3Key:
          Ref: LambdaS3Key
        S3ObjectVersion:
          Fn::If:
          - HasS3ObjectVersion
          - Ref: LambdaS3ObjectVersion
          - Ref: AWS::NoValue
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: LogGroupName
      RetentionInDays: 14
  ApiGatewayHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: eliza-http-api
      ProtocolType: HTTP
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ApiGatewayHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ElizaLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ApiGatewayHttpApi
      RouteKey: POST /v1/chat/completions
      Target:
        Fn::Sub: integrations/${ApiGatewayIntegration}
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: ApiGatewayHttpApi
      StageName: $default
      AutoDeploy: true
  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ElizaLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApi}/*/*
Outputs:
  ApiUrl:
    Description: HTTP API URL
    Value:
      Fn::Sub: https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
Conditions:
  HasS3ObjectVersion:
    Fn::Not:
    - Fn::Equals:
      - Ref: LambdaS3ObjectVersion
      - ''
  HasApiKeyPlain:
    Fn::Not:
    - Fn::Equals:
      - Ref: ApiKeyPlain
      - ''
  HasApiKeySSM:
    Fn::Not:
    - Fn::Equals:
      - Ref: ApiKeySSMParameterName
      - ''
  HasApiKeySecret:
    Fn::Not:
    - Fn::Equals:
      - Ref: ApiKeySecretId
      - ''
